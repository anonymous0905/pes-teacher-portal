import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.42.3";
import nodemailer from "npm:nodemailer@6.9.0";
Deno.serve(async (req)=>{
  const corsHeaders = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization"
  };
  if (req.method === "OPTIONS") {
    return new Response("OK", {
      headers: corsHeaders
    });
  }
  if (req.method !== "POST") {
    return new Response("Method not allowed", {
      status: 405,
      headers: corsHeaders
    });
  }
  try {
    const { sessionCode } = await req.json();
    const supabase = createClient(Deno.env.get("SUPABASE_URL"), Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"));
    // Fetch session with procedure join
    const { data: session, error: sessionErr } = await supabase.from("sessions").select("srn, expires_at, session_code, is_practice, is_evaluation, procedures(procedure_name)").eq("session_code", sessionCode).single();
    if (sessionErr || !session) {
      return new Response(JSON.stringify({
        error: "Invalid session code"
      }), {
        headers: corsHeaders,
        status: 404
      });
    }
    // Fetch student using SRN
    const { data: student, error: studentErr } = await supabase.from("students").select("name, email").eq("srn", session.srn).single();
    if (studentErr || !student) {
      return new Response(JSON.stringify({
        error: "Student not found"
      }), {
        headers: corsHeaders,
        status: 404
      });
    }
    const sessionMode = session.is_practice ? "Practice" : session.is_evaluation ? "Evaluation" : "Unspecified";
    const procedureName = session.procedures?.procedure_name ?? "Unknown";
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: Deno.env.get("GMAIL_USER"),
        pass: Deno.env.get("GMAIL_PASS")
      }
    });
    const expiryDate = new Date(session.expires_at).toLocaleString("en-IN", {
      timeZone: "Asia/Kolkata",
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
    const mailOptions = {
      from: Deno.env.get("GMAIL_USER"),
      to: student.email,
      subject: "ðŸ§¾ Your Session Code & Details",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9;">
          <h2 style="color: #333;">Hello ${student.name},</h2>
          <p style="color: #555;">Your session has been successfully created.</p>
          <p style="color: #555;"><strong>Session Code:</strong> ${session.session_code}</p>
          <p style="color: #555;"><strong>SRN:</strong> ${session.srn}</p>
          <p style="color: #555;"><strong>Procedure:</strong> ${procedureName}</p>
          <p style="color: #555;"><strong>Mode:</strong> ${sessionMode}</p>
          <p style="color: #555;"><strong>Expires At:</strong> ${expiryDate}</p>
          <p style="color: #555;">Please make sure to use the session code before the expiry time.</p>
          <p style="color: #555;">Best regards,<br>Team CAVE</p>
        </div>
      `
    };
    let attempts = 0;
    let success = false;
    let sendError = null;
    while(attempts < 3 && !success){
      try {
        await transporter.sendMail(mailOptions);
        success = true;
      } catch (err) {
        sendError = err;
        attempts++;
        await new Promise((res)=>setTimeout(res, 1000));
      }
    }
    if (!success) {
      return new Response(JSON.stringify({
        error: "Failed to send email after retries",
        details: sendError
      }), {
        headers: corsHeaders,
        status: 500
      });
    }
    return new Response(JSON.stringify({
      message: "Email sent successfully!"
    }), {
      headers: corsHeaders,
      status: 200
    });
  } catch (err) {
    return new Response(JSON.stringify({
      error: "Unexpected error",
      details: err.message
    }), {
      headers: corsHeaders,
      status: 500
    });
  }
});
